/*
 * generated by Xtext 2.26.0-SNAPSHOT
 */
package org.xtext.example.mydsl4test.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;
import org.xtext.example.mydsl3test.services.MyDslTestGrammarAccess;

@Singleton
public class OtherDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class OtherRootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl4test.OtherDsl.OtherRoot");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueModelParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//OtherRoot:
		//value=Model;
		@Override public ParserRule getRule() { return rule; }
		
		//value=Model
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//Model
		public RuleCall getValueModelParserRuleCall_0() { return cValueModelParserRuleCall_0; }
	}
	
	
	private final OtherRootElements pOtherRoot;
	
	private final Grammar grammar;
	
	private final MyDslTestGrammarAccess gaMyDslTest;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public OtherDslGrammarAccess(GrammarProvider grammarProvider,
			MyDslTestGrammarAccess gaMyDslTest,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaMyDslTest = gaMyDslTest;
		this.gaTerminals = gaTerminals;
		this.pOtherRoot = new OtherRootElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl4test.OtherDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public MyDslTestGrammarAccess getMyDslTestGrammarAccess() {
		return gaMyDslTest;
	}
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//OtherRoot:
	//value=Model;
	public OtherRootElements getOtherRootAccess() {
		return pOtherRoot;
	}
	
	public ParserRule getOtherRootRule() {
		return getOtherRootAccess().getRule();
	}
	
	//Model:
	//    greetings+=Greeting*;
	public MyDslTestGrammarAccess.ModelElements getModelAccess() {
		return gaMyDslTest.getModelAccess();
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Greeting:
	//    'Hello' name=ID '!';
	public MyDslTestGrammarAccess.GreetingElements getGreetingAccess() {
		return gaMyDslTest.getGreetingAccess();
	}
	
	public ParserRule getGreetingRule() {
		return getGreetingAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
